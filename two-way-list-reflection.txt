Мое решение полностью совпало с эталонным. В своей работе, чтобы избегать дублирования кода,
часто расширяю классы через наследование. Обычно я беру уже работающий класс, напрямую наследую,
и дописываю логику через расширение или переопределение родительских методов.
Т.е. по сути брал TwoWayList и наследовал от LinkedList. Сегодня понял, что был не прав. Ведь условный LinkedList
в будущем, может быть изменен/дополнен, а это в свою очередь повлияет на условный TwoWayList.
А при наличии базового/родительского класса, этого можно избежать, и сэкономить время на поиск багов
и рефактор, да и тестирование выглядит проще.
Впредь буду создавать родительский класс, и делать его полную или частичную реализацию и наследовать.
